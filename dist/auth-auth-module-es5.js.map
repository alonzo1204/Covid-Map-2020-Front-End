{"version":3,"sources":["webpack:///src/app/auth/_helpers/confirm-equal-validator.directive.ts","webpack:///src/app/auth/_services/auth.service.ts","webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/register/register.component.html"],"names":["ConfirmEqualValidatorDirective","control","controlToCompare","parent","get","appConfirmEqualValidator","value","provide","useExisting","multi","selector","providers","AUTH_API","httpOptions","headers","AuthService","http","credentials","post","username","password","user","name","lastname","idDataCountry","email","providedIn","routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","authService","tokenStorage","router","form","isLoggedIn","isLoginFailed","errorMessage","roles","console","log","getToken","navigateByUrl","login","subscribe","data","saveToken","accessToken","saveUser","getUser","toDashBoard","err","error","message","templateUrl","styleUrls","RegisterComponent","dataCountryService","isSuccessful","isSignUpFailed","getDataCountries","dataCountries","Number","register","navigate"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive, Input } from '@angular/core';\n\n@Directive({\n    selector: '[appConfirmEqualValidator]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        useExisting: ConfirmEqualValidatorDirective,\n        multi: true,\n    }]\n})\nexport class ConfirmEqualValidatorDirective implements Validator{\n    @Input() appConfirmEqualValidator: string;\n    validate(control: AbstractControl): {[key:string]: any} | null{\n        const controlToCompare = control.parent.get(this.appConfirmEqualValidator);\n        if (controlToCompare && controlToCompare.value !== control.value) {\n            return { 'notEqual': true };\n        }\n\n        return null;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n//const AUTH_API = 'http://covid-map-2020-back-end.herokuapp.com/api/auth/';\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n \n  constructor(private http: HttpClient) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      name: user.name,\n      lastname: user.lastname,\n      idDataCountry: user.idDataCountry,\n      username: user.username,\n      email: user.email,\n      password: user.password\n    }, httpOptions);\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { FormsModule } from '@angular/forms';\nexport const routes: Routes = [\n  { path: \"login\", component: LoginComponent },\n  { path: \"register\", component: RegisterComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes),FormsModule],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { ConfirmEqualValidatorDirective } from \"./_helpers/confirm-equal-validator.directive\";\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    ConfirmEqualValidatorDirective\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    FormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = ' ';\n  roles: string[] = [];\n  \n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService, private router: Router) { }\n\n  ngOnInit() {\n    console.log(this.tokenStorage.getToken())\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn=true;\n      this.router.navigateByUrl('/pages/home');\n    }\n  }\n\n  onSubmit() {\n\n    this.authService.login(this.form).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.toDashBoard(); \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n  toDashBoard() {\n    this.router.navigateByUrl('/pages/home');\n  }\n\n  \n}\n\n\n","<div class=\"image-fit-all\" style=\"height: 100vh; \">\n<div *ngIf=\"!isLoggedIn\" >\n    <div class=\"card card-container\">\n      <!--<img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />-->\n      <h3 style=\"text-align: center;\">COVID-MAP</h3>\n      <form\n        *ngIf=\"!isLoggedIn\"\n        name=\"form\"\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\n        #f=\"ngForm\"\n        novalidate\n      >\n        <div class=\"form-group\">\n          <label for=\"username\" >Usuario</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"username\"\n            [(ngModel)]=\"form.username\"\n            required\n            #username=\"ngModel\"\n            \n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && username.invalid\"\n          >\n            ¡El usuario es requerido!\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Contraseña</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n            [(ngModel)]=\"form.password\"\n            required\n            minlength=\"6\"\n            #password=\"ngModel\"\n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && password.invalid\"\n          >\n            <div *ngIf=\"password.errors.required\">¡La contraseña es requerida!</div>\n            <div *ngIf=\"password.errors.minlength\">\n              La contraseña debe tener al menos 6 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block button-iniciar\">\n            Iniciar Sesión\n          </button>\n        </div>\n        <div class=\"form-group\">\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && isLoginFailed\"\n          >\n            Login failed: {{ errorMessage }}\n          </div>\n        </div >\n          <a  href=\"auth/register\" class=\"nav-link\" >Registrarse</a>\n      \n      </form>\n\n      <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n        Has iniciado sesión como un  {{ roles }}.\n      </div>\n    \n    </div>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { DataCountryService } from '../_services/dataCountry.service';\n\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { FormGroup } from '@angular/forms';\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n  constructor( private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    public dataCountryService: DataCountryService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isSuccessful=true;\n      this.router.navigateByUrl('/pages/dashboard');\n    }else {\n    this.getDataCountries()}\n  }\n  getDataCountries(){\n    this.dataCountryService.getDataCountries().subscribe(\n      data => {\n        console.log(\"getDataCountries\",data)\n        this.dataCountryService.dataCountries = data as any[];\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n  toDashBoard() {\n    this.router.navigateByUrl('/pages/home');\n  }\n  toLogin(){\n    this.router.navigateByUrl('/auth/login')\n  }\n\n  onSubmit() {\n    this.form.idDataCountry = Number(this.form.idDataCountry)\n\n    this.authService.register(this.form).subscribe(\n      data => {\n        console.log(\"data\",data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate(['login']);\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n   }\n}\n","\n<div class=\"image-fit-all\" *ngIf=\"!isSuccessful\" style=\"height: 140vh;\"> \n    <div class=\"card card-container\">\n\n      <!--<img id=\"profile-img\" \n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\" \n      class=\"profile-img-card\" />-->\n      <h4 style=\"text-align: center;\">Registro de Usuario</h4>\n      <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n        <div class=\"form-group\">\n          <label for=\"username\">Nombre</label>\n          <input type=\"text\" class=\"form-control\" name=\"name\" [(ngModel)]=\"form.name\" required minlength=\"3\"\n            maxlength=\"20\" #name=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && name.invalid\">\n            <div *ngIf=\"name.errors.required\">Se necesita un nombre.</div>\n            <div *ngIf=\"name.errors.minlength\">\n              El nombre debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"name.errors.maxlength\">\n              El nombre debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"username\">Apellido</label>\n          <input type=\"text\" class=\"form-control\" name=\"lastname\" [(ngModel)]=\"form.lastname\" required minlength=\"3\"\n            maxlength=\"20\" #lastname=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n            <div *ngIf=\"lastname.errors.required\">El apellido es requerido.</div>\n            <div *ngIf=\"lastname.errors.minlength\">\n              El apellido debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"lastname.errors.maxlength\">\n              El apellido debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"username\">Usuario</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\" required minlength=\"3\"\n            maxlength=\"20\" #username=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n            <div *ngIf=\"username.errors.required\">El usuario es requerido.</div>\n            <div *ngIf=\"username.errors.minlength\">\n              El usuario debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"username.errors.maxlength\">\n              El usuario debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Correo</label>\n          <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required email\n            #email=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n            <div *ngIf=\"email.errors.required\">El correo es requerido.</div>\n            <div *ngIf=\"email.errors.email\">\n              Debe ser un correo válido.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Contraseña</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n            #password=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n            <div *ngIf=\"password.errors.required\">La contraseña es requerida.</div>\n            <div *ngIf=\"password.errors.minlength\">\n              La contraseña debe tener al menos 6 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"rePass\">Repetir Contraseña</label>\n          <input type=\"password\" appConfirmEqualValidator=\"password\" class=\"form-control\" name=\"rePass\" [(ngModel)]=\"form.rePass\" required\n                 #rePass=\"ngModel\" >\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && rePass.invalid \">\n            <div *ngIf=\"rePass.errors.required\">\n              Repetir contraseña es requerido.\n            </div>\n            <div *ngIf=\"rePass.errors?.notEqual && !rePass.errors?.required\">\n              La contraseña debe ser igual.\n            </div>\n          </div>\n         \n        </div>\n        <!-- <div class=\"form-group\">\n          <label>City</label>\n          <select *ngFor=\"let city of cityService.cities\" \n          name=\"idCity\" [(ngModel)]=\"form.idCity\" keyboardType=\"number\"\n          class=\"form-control\">\n            <option value={{city.id}}>{{city.nameCity}}</option>\n          </select>\n        </div> -->\n  \n        <!-- <div class=\"form-group\">\n          <label>Country</label>\n          <select *ngFor=\"let country of countryService.countries\"\n          name=\"idCountry\" [(ngModel)]=\"form.idCountry\" keyboardType=\"number\"\n          class=\"form-control\">\n            <option  value={{country.id}}>{{country.name}}</option>\n          </select>\n        </div> -->\n  \n        <div class=\"form-group\">\n          <label>País</label>\n          <select \n          \n          name=\"idDataCountry\" \n          [(ngModel)]=\"form.idDataCountry\"\n           keyboardType=\"number\"\n          class=\"form-control\">\n            <option  *ngFor=\"let dataCountry of dataCountryService.dataCountries\" value={{dataCountry.id}}>{{dataCountry.country}}</option>\n          </select>\n          \n        </div>\n  \n  \n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block\">Registrarse</button>\n        </div>\n  \n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n          Signup failed!<br />{{ errorMessage }}\n        </div>\n        <a href=\"auth/login\" class=\"nav-link\" >Iniciar Sesión</a>\n      </form>\n  \n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n        ¡Te has registrado exitosamente! :)\n      </div>\n    </div>\n  </div>\n"]}