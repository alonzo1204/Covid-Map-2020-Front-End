{"version":3,"sources":["./src/app/auth/_helpers/confirm-equal-validator.directive.ts","./src/app/auth/_services/auth.service.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { Validator, NG_VALIDATORS, AbstractControl } from '@angular/forms';\nimport { Directive, Input } from '@angular/core';\n\n@Directive({\n    selector: '[appConfirmEqualValidator]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        useExisting: ConfirmEqualValidatorDirective,\n        multi: true,\n    }]\n})\nexport class ConfirmEqualValidatorDirective implements Validator{\n    @Input() appConfirmEqualValidator: string;\n    validate(control: AbstractControl): {[key:string]: any} | null{\n        const controlToCompare = control.parent.get(this.appConfirmEqualValidator);\n        if (controlToCompare && controlToCompare.value !== control.value) {\n            return { 'notEqual': true };\n        }\n\n        return null;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n//const AUTH_API = 'http://covid-map-2020-back-end.herokuapp.com/api/auth/';\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n \n  constructor(private http: HttpClient) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username: credentials.username,\n      password: credentials.password\n    }, httpOptions);\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      name: user.name,\n      lastname: user.lastname,\n      idDataCountry: user.idDataCountry,\n      username: user.username,\n      email: user.email,\n      password: user.password\n    }, httpOptions);\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { FormsModule } from '@angular/forms';\nexport const routes: Routes = [\n  { path: \"login\", component: LoginComponent },\n  { path: \"register\", component: RegisterComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes),FormsModule],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { ConfirmEqualValidatorDirective } from \"./_helpers/confirm-equal-validator.directive\";\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    ConfirmEqualValidatorDirective\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    FormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = ' ';\n  roles: string[] = [];\n  \n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService, private router: Router) { }\n\n  ngOnInit() {\n    console.log(this.tokenStorage.getToken())\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn=true;\n      this.router.navigateByUrl('/pages/home');\n    }\n  }\n\n  onSubmit() {\n\n    this.authService.login(this.form).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.toDashBoard(); \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n  toDashBoard() {\n    this.router.navigateByUrl('/pages/home');\n  }\n\n  \n}\n\n\n","<div class=\"image-fit-all\" style=\"height: 100vh; \">\n<div *ngIf=\"!isLoggedIn\" >\n    <div class=\"card card-container\">\n      <!--<img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />-->\n      <h3 style=\"text-align: center;\">COVID-MAP</h3>\n      <form\n        *ngIf=\"!isLoggedIn\"\n        name=\"form\"\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\n        #f=\"ngForm\"\n        novalidate\n      >\n        <div class=\"form-group\">\n          <label for=\"username\" >Usuario</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"username\"\n            [(ngModel)]=\"form.username\"\n            required\n            #username=\"ngModel\"\n            \n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && username.invalid\"\n          >\n            ¡El usuario es requerido!\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Contraseña</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n            [(ngModel)]=\"form.password\"\n            required\n            minlength=\"6\"\n            #password=\"ngModel\"\n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && password.invalid\"\n          >\n            <div *ngIf=\"password.errors.required\">¡La contraseña es requerida!</div>\n            <div *ngIf=\"password.errors.minlength\">\n              La contraseña debe tener al menos 6 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block button-iniciar\">\n            Iniciar Sesión\n          </button>\n        </div>\n        <div class=\"form-group\">\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && isLoginFailed\"\n          >\n            Login failed: {{ errorMessage }}\n          </div>\n        </div >\n          <a  href=\"auth/register\" class=\"nav-link\" >Registrarse</a>\n      \n      </form>\n\n      <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n        Has iniciado sesión como un  {{ roles }}.\n      </div>\n    \n    </div>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { DataCountryService } from '../_services/dataCountry.service';\n\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { FormGroup } from '@angular/forms';\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n  constructor( private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    public dataCountryService: DataCountryService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isSuccessful=true;\n      this.router.navigateByUrl('/pages/dashboard');\n    }else {\n    this.getDataCountries()}\n  }\n  getDataCountries(){\n    this.dataCountryService.getDataCountries().subscribe(\n      data => {\n        console.log(\"getDataCountries\",data)\n        this.dataCountryService.dataCountries = data as any[];\n      },\n      err => {\n        console.log(err)\n      }\n    );\n  }\n  toDashBoard() {\n    this.router.navigateByUrl('/pages/home');\n  }\n  toLogin(){\n    this.router.navigateByUrl('/auth/login')\n  }\n\n  onSubmit() {\n    this.form.idDataCountry = Number(this.form.idDataCountry)\n\n    this.authService.register(this.form).subscribe(\n      data => {\n        console.log(\"data\",data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate(['login']);\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n   }\n}\n","\n<div class=\"image-fit-all\" *ngIf=\"!isSuccessful\" style=\"height: 140vh;\"> \n    <div class=\"card card-container\">\n\n      <!--<img id=\"profile-img\" \n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\" \n      class=\"profile-img-card\" />-->\n      <h4 style=\"text-align: center;\">Registro de Usuario</h4>\n      <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n        <div class=\"form-group\">\n          <label for=\"username\">Nombre</label>\n          <input type=\"text\" class=\"form-control\" name=\"name\" [(ngModel)]=\"form.name\" required minlength=\"3\"\n            maxlength=\"20\" #name=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && name.invalid\">\n            <div *ngIf=\"name.errors.required\">Se necesita un nombre.</div>\n            <div *ngIf=\"name.errors.minlength\">\n              El nombre debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"name.errors.maxlength\">\n              El nombre debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"username\">Apellido</label>\n          <input type=\"text\" class=\"form-control\" name=\"lastname\" [(ngModel)]=\"form.lastname\" required minlength=\"3\"\n            maxlength=\"20\" #lastname=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n            <div *ngIf=\"lastname.errors.required\">El apellido es requerido.</div>\n            <div *ngIf=\"lastname.errors.minlength\">\n              El apellido debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"lastname.errors.maxlength\">\n              El apellido debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"username\">Usuario</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"form.username\" required minlength=\"3\"\n            maxlength=\"20\" #username=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n            <div *ngIf=\"username.errors.required\">El usuario es requerido.</div>\n            <div *ngIf=\"username.errors.minlength\">\n              El usuario debe tener al menos 3 caracteres.\n            </div>\n            <div *ngIf=\"username.errors.maxlength\">\n              El usuario debe tener máximo 20 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Correo</label>\n          <input type=\"email\" class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required email\n            #email=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n            <div *ngIf=\"email.errors.required\">El correo es requerido.</div>\n            <div *ngIf=\"email.errors.email\">\n              Debe ser un correo válido.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Contraseña</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n            #password=\"ngModel\" />\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n            <div *ngIf=\"password.errors.required\">La contraseña es requerida.</div>\n            <div *ngIf=\"password.errors.minlength\">\n              La contraseña debe tener al menos 6 caracteres.\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"rePass\">Repetir Contraseña</label>\n          <input type=\"password\" appConfirmEqualValidator=\"password\" class=\"form-control\" name=\"rePass\" [(ngModel)]=\"form.rePass\" required\n                 #rePass=\"ngModel\" >\n          <div class=\"alert-danger\" *ngIf=\"f.submitted && rePass.invalid \">\n            <div *ngIf=\"rePass.errors.required\">\n              Repetir contraseña es requerido.\n            </div>\n            <div *ngIf=\"rePass.errors?.notEqual && !rePass.errors?.required\">\n              La contraseña debe ser igual.\n            </div>\n          </div>\n         \n        </div>\n        <!-- <div class=\"form-group\">\n          <label>City</label>\n          <select *ngFor=\"let city of cityService.cities\" \n          name=\"idCity\" [(ngModel)]=\"form.idCity\" keyboardType=\"number\"\n          class=\"form-control\">\n            <option value={{city.id}}>{{city.nameCity}}</option>\n          </select>\n        </div> -->\n  \n        <!-- <div class=\"form-group\">\n          <label>Country</label>\n          <select *ngFor=\"let country of countryService.countries\"\n          name=\"idCountry\" [(ngModel)]=\"form.idCountry\" keyboardType=\"number\"\n          class=\"form-control\">\n            <option  value={{country.id}}>{{country.name}}</option>\n          </select>\n        </div> -->\n  \n        <div class=\"form-group\">\n          <label>País</label>\n          <select \n          \n          name=\"idDataCountry\" \n          [(ngModel)]=\"form.idDataCountry\"\n           keyboardType=\"number\"\n          class=\"form-control\">\n            <option  *ngFor=\"let dataCountry of dataCountryService.dataCountries\" value={{dataCountry.id}}>{{dataCountry.country}}</option>\n          </select>\n          \n        </div>\n  \n  \n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block\">Registrarse</button>\n        </div>\n  \n        <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n          Signup failed!<br />{{ errorMessage }}\n        </div>\n        <a href=\"auth/login\" class=\"nav-link\" >Iniciar Sesión</a>\n      </form>\n  \n      <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n        ¡Te has registrado exitosamente! :)\n      </div>\n    </div>\n  </div>\n"],"sourceRoot":"webpack:///"}